use io;
use util;

use model;

fn importAndProfile(path: String) {
  dataset = node<Dataset>::new(Dataset {
      features: nodeTime<nodeIndex<String, any>>::new(),
      profiles: nodeIndex<String, Gaussian>::new(),
      processed: nodeTime<nodeIndex<String, float>>::new(),
      prediction: nodeTime<nodeIndex<String, any>>::new(),
      trained_models: nodeTime<Model>::new(),
    });
  var csvFormat = CsvFormat{
    separator: ',',
    thousands_separator: '_',
    header_lines: 0,
  };

  var csvIn = CsvReader::new(path, csvFormat);
  var headers: Array<String>;
  if (csvIn.available() > 0) {
    headers = csvIn.read() as Array<String>;
  } else {
    throw "${path} is empty";
  }
  var profiles = Array<Gaussian>::new(headers.size());
  for (index, header in headers[1..]) {
    var profile = Gaussian{};
    profiles[index] = profile;
    dataset->profiles.set(header, profile);
  }

  // while (csvIn.available() > 0) {
  for (var row = 0; row < 500_000 && csvIn.available() > 0; ++row) {
    var datapoint = nodeIndex<String, any>::new();
    var values = csvIn.read() as Array<any>;
    var timestamp = Date::parse(values[0] as String, "%Y-%m-%d %H:%M:%S", null).toTime();
    for (index, value in values[1..]) {
      datapoint.set(headers[index], value);
      if (!(value is float || value is int)) {
        continue;
      }
      profiles[index].add(value as float);
    }
    dataset->features.setAt(timestamp, datapoint);
    if ((row + 1) % 100_000 == 0){
      info("Imported ${row + 1} rows.");
    }
  }
}