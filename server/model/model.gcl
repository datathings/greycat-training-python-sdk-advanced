use util;

type Model {
  configPath: String;
  modelPath: String;
  trainLoss: nodeList<float>;
  testLoss: nodeList<float>;
}

type Dataset {
  features: nodeTime<nodeIndex<String, any>>;
  profiles: nodeIndex<String, Gaussian>;
  processed: nodeTime<nodeIndex<String, float>>;
  prediction: nodeTime<nodeIndex<String, any>>;
  trained_models: nodeTime<Model>;

  fn normalize() {
    // Normalize data
    for (timestamp, datapoint in this.features) {
      var processed_datapoint = nodeIndex<String, float>::new();
      for (feature, value in datapoint) {
        if (!(value is float || value is int)) {
          continue;
        }
        var profile = this.profiles.get(feature)!!;
        var std = profile.std()!!;
        if (std == 0.0) {
          processed_datapoint.set(feature, 0.0);
        } else {
          processed_datapoint.set(feature,((value as float) - profile.avg()!!) / std);
        }
      }
      this.processed.setAt(timestamp, processed_datapoint);
    }
  }
}

var dataset: node<Dataset>?;