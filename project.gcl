@include("gc");

use model;
use importer;

fn main() {
  if (dataset == null) {
    info("Importing data…");
    import("data/dataset.csv");
    info("Processing data…");
    dataset!!->normalize();
    info("Committing data to disk…");
  }
}

@expose
fn getProcessed(cols: int, rows: int): Table<any> {
  if (dataset == null || dataset->processed.size() == 0) {
    throw "wrong state";
  }
  var res = Table<any>::new(dataset!!->processed.first()!!.size() + 1);
  var row = 0;
  for (timestamp, datapoint in dataset?->processed?) {
    res.set(row, 0, timestamp);
    var col = 1;
    for (feature, value in datapoint) {
      res.set(row, col, value);
      if (++col == cols + 1) {
        break;
      }
    }
    if (++row == rows) {
      break;
    }
  }
  return res;
}

@expose
@write
fn saveModel(configPath: String, modelPath: String, losses: Table<float>) {
  if (dataset == null) {
    throw "wrong state";
  }
  var timestamp = time::now();
  dataset!!->trained_models.setAt(timestamp, Model {
      configPath: configPath,
      modelPath: modelPath,
      trainLoss: nodeList<float>::new(),
      testLoss: nodeList<float>::new(),
    });
  var trained_model = dataset!!->trained_models.getAt(timestamp)!!;
  for (var row = 0; row < losses.rows(); ++row) {
    trained_model.trainLoss.add(losses.get(row, 0));
    trained_model.testLoss.add(losses.get(row, 1));
  }
}